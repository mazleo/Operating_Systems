{
    "__type__": "Deck",
    "children": [],
    "crowdanki_uuid": "186237d6-bf5d-11ef-b4fe-25358fe4e4db",
    "deck_config_uuid": "18623ee8-bf5d-11ef-b4fe-25358fe4e4db",
    "deck_configurations": [
        {
            "__type__": "DeckConfig",
            "autoplay": true,
            "buryInterdayLearning": false,
            "crowdanki_uuid": "18623ee8-bf5d-11ef-b4fe-25358fe4e4db",
            "dyn": false,
            "interdayLearningMix": 0,
            "lapse": {
                "delays": [
                    10.0
                ],
                "leechAction": 1,
                "leechFails": 8,
                "minInt": 1,
                "mult": 0.0
            },
            "maxTaken": 60,
            "name": "Default",
            "new": {
                "bury": false,
                "delays": [
                    1.0,
                    10.0
                ],
                "initialFactor": 2500,
                "ints": [
                    1,
                    4,
                    0
                ],
                "order": 1,
                "perDay": 20
            },
            "newGatherPriority": 0,
            "newMix": 0,
            "newPerDayMinimum": 0,
            "newSortOrder": 0,
            "replayq": true,
            "rev": {
                "bury": false,
                "ease4": 1.3,
                "hardFactor": 1.2,
                "ivlFct": 1.0,
                "maxIvl": 36500,
                "perDay": 200
            },
            "reviewOrder": 0,
            "timer": 0
        }
    ],
    "desc": "",
    "dyn": 0,
    "extendNew": 0,
    "extendRev": 0,
    "media_files": [
        "_auto-render.js",
        "_highlight.css",
        "_highlight.js",
        "_katex.css",
        "_katex.min.js",
        "_markdown-it-mark.js",
        "_markdown-it.min.js",
        "_mhchem.js"
    ],
    "name": "Operating Systems",
    "newLimit": null,
    "newLimitToday": null,
    "note_models": [
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "css": ".card {\n    font-family: arial;\n    font-size: 20px;\n    text-align: center;\n    color: black;\n    background-color: white;\n}\n.cloze {\n    font-weight: bold;\n    color: blue;\n}\n.nightMode .cloze {\n    color: lightblue;\n}\n",
            "flds": [
                {
                    "collapsed": false,
                    "description": "",
                    "excludeFromSearch": false,
                    "font": "Arial",
                    "name": "Text",
                    "ord": 0,
                    "plainText": false,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "collapsed": false,
                    "description": "",
                    "excludeFromSearch": false,
                    "font": "Arial",
                    "name": "Back Extra",
                    "ord": 1,
                    "plainText": false,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "Cloze",
            "originalStockKind": 5,
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tmpls": [
                {
                    "afmt": "{{cloze:Text}}<br>\n{{Back Extra}}",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "name": "Cloze",
                    "ord": 0,
                    "qfmt": "{{cloze:Text}}"
                }
            ],
            "type": 1
        },
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "css": ".card {\n    font-family: arial;\n    font-size: 20px;\n    text-align: center;\n    color: black;\n    background-color: white;\n}\n",
            "flds": [
                {
                    "collapsed": false,
                    "description": "",
                    "excludeFromSearch": false,
                    "font": "Arial",
                    "name": "Front",
                    "ord": 0,
                    "plainText": false,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "collapsed": false,
                    "description": "",
                    "excludeFromSearch": false,
                    "font": "Arial",
                    "name": "Back",
                    "ord": 1,
                    "plainText": false,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "Basic",
            "originalStockKind": 1,
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tmpls": [
                {
                    "afmt": "{{FrontSide}}\n\n<hr id=answer>\n\n{{Back}}",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "name": "Card 1",
                    "ord": 0,
                    "qfmt": "{{Front}}"
                }
            ],
            "type": 0
        },
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "css": "\n\n.card {\n  font-family: arial;\n  font-size: 20px;\n  color: black;\n  background-color: white;\n}\ntable, th, td {\n\tborder: 1px solid black;\n\tborder-collapse: collapse;\n}\n#front, #back, #extra {\n\tvisibility: hidden;\n}\npre code {\n  background-color: #eee;\n  border: 1px solid #999;\n  display: block;\n  padding: 20px;\n  overflow: auto;\n}\n",
            "flds": [
                {
                    "collapsed": false,
                    "description": "",
                    "excludeFromSearch": false,
                    "font": "Arial",
                    "name": "Front",
                    "ord": 0,
                    "plainText": false,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "collapsed": false,
                    "description": "",
                    "excludeFromSearch": false,
                    "font": "Arial",
                    "name": "Back",
                    "ord": 1,
                    "plainText": false,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "KaTeX and Markdown Basic",
            "originalStockKind": 1,
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tmpls": [
                {
                    "afmt": "\n\n<div id=\"front\"><pre>{{Front}}</pre></div>\n\n<hr id=answer>\n\n<div id=\"back\"><pre>{{Back}}</pre></div>\n\n<script>\n\tvar getResources = [\n\t\tgetCSS(\"_katex.css\", \"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css\"),\n\t\tgetCSS(\"_highlight.css\", \"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/styles/default.min.css\"),\n\t\tgetScript(\"_highlight.js\", \"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/highlight.min.js\"),\n\t\tgetScript(\"_katex.min.js\", \"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.js\"),\n\t\tgetScript(\"_auto-render.js\", \"https://cdn.jsdelivr.net/gh/Jwrede/Anki-KaTeX-Markdown/auto-render-cdn.js\"),\n\t\tgetScript(\"_markdown-it.min.js\", \"https://cdnjs.cloudflare.com/ajax/libs/markdown-it/12.0.4/markdown-it.min.js\"),\n\t\tgetScript(\"_markdown-it-mark.js\",\"https://cdn.jsdelivr.net/gh/Jwrede/Anki-KaTeX-Markdown/_markdown-it-mark.js\")\n\t];\n        Promise.all(getResources).then(() => getScript(\"_mhchem.js\", \"https://cdn.jsdelivr.net/npm/katex@0.13.11/dist/contrib/mhchem.min.js\")).then(render).catch(show);\n\t\n\n\tfunction getScript(path, altURL) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet script = document.createElement(\"script\");\n\t\t\tscript.onload = resolve;\n\t\t\tscript.onerror = function() {\n\t\t\t\tlet script_online = document.createElement(\"script\");\n\t\t\t\tscript_online.onload = resolve;\n\t\t\t\tscript_online.onerror = reject;\n\t\t\t\tscript_online.src = altURL;\n\t\t\t\tdocument.head.appendChild(script_online);\n\t\t\t}\n\t\t\tscript.src = path;\n\t\t\tdocument.head.appendChild(script);\n\t\t})\n\t}\n\n\tfunction getCSS(path, altURL) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tvar css = document.createElement('link');\n\t\t\tcss.setAttribute('rel', 'stylesheet');\n\t\t\tcss.type = 'text/css';\n\t\t\tcss.onload = resolve;\n\t\t\tcss.onerror = function() {\n\t\t\t\tvar css_online = document.createElement('link');\n\t\t\t\tcss_online.setAttribute('rel', 'stylesheet');\n\t\t\t\tcss_online.type = 'text/css';\n\t\t\t\tcss_online.onload = resolve;\n\t\t\t\tcss_online.onerror = reject;\n\t\t\t\tcss_online.href = altURL;\n\t\t\t\tdocument.head.appendChild(css_online);\n\t\t\t}\n\t\t\tcss.href = path;\n\t\t\tdocument.head.appendChild(css);\n\t\t});\n\t}\n\n\tfunction render() {\n\t\trenderMath(\"front\");\n\t\tmarkdown(\"front\");\n\t\trenderMath(\"back\");\n\t\tmarkdown(\"back\");\n\t\tshow();\n\t}\n\n\tfunction show() {\n\t\tdocument.getElementById(\"front\").style.visibility = \"visible\";\n\t\tdocument.getElementById(\"back\").style.visibility = \"visible\";\n\t}\n\n\n\tfunction renderMath(ID) {\n\t\tlet text = document.getElementById(ID).innerHTML;\n\t\ttext = replaceInString(text);\n\t\tdocument.getElementById(ID).textContent = text;\n\t\trenderMathInElement(document.getElementById(ID), {\n\t\t\tdelimiters:  [\n  \t\t\t\t{left: \"$$\", right: \"$$\", display: true},\n  \t\t\t\t{left: \"$\", right: \"$\", display: false}\n\t\t\t],\n                        throwOnError : false\n\t\t});\n\t}\n\tfunction markdown(ID) {\n\t\tlet md = new markdownit({typographer: true, html:true, highlight: function (str, lang) {\n                            if (lang && hljs.getLanguage(lang)) {\n                                try {\n                                    return hljs.highlight(str, { language: lang }).value;\n                                } catch (__) {}\n                            }\n\n                            return ''; // use external default escaping\n                        }}).use(markdownItMark);\n\t\tlet text = replaceHTMLElementsInString(document.getElementById(ID).innerHTML);\n\t\ttext = md.render(text);\n\t\tdocument.getElementById(ID).innerHTML = text.replace(/&lt;\\/span&gt;/gi,\"\\\\\");\n\t}\n\tfunction replaceInString(str) {\n\t\tstr = str.replace(/<[\\/]?pre[^>]*>/gi, \"\");\n\t\tstr = str.replace(/<br\\s*[\\/]?[^>]*>/gi, \"\\n\");\n\t\tstr = str.replace(/<div[^>]*>/gi, \"\\n\");\n\t\t// Thanks Graham A!\n\t\tstr = str.replace(/<[\\/]?span[^>]*>/gi, \"\")\n\t\tstr.replace(/<\\/div[^>]*>/g, \"\\n\");\n\t\treturn replaceHTMLElementsInString(str);\n\t}\n\n\tfunction replaceHTMLElementsInString(str) {\n\t\tstr = str.replace(/&nbsp;/gi, \" \");\n\t\tstr = str.replace(/&tab;/gi, \"\t\");\n\t\tstr = str.replace(/&gt;/gi, \">\");\n\t\tstr = str.replace(/&lt;/gi, \"<\");\n\t\treturn str.replace(/&amp;/gi, \"&\");\n\t}\n</script>\n",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "name": "KaTeX and Markdown Basic",
                    "ord": 0,
                    "qfmt": "\n\n<div id=\"front\"><pre>{{Front}}</pre></div>\n\n<script>\n\tvar getResources = [\n\t\tgetCSS(\"_katex.css\", \"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css\"),\n\t\tgetCSS(\"_highlight.css\", \"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/styles/default.min.css\"),\n\t\tgetScript(\"_highlight.js\", \"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/highlight.min.js\"),\n\t\tgetScript(\"_katex.min.js\", \"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.js\"),\n\t\tgetScript(\"_auto-render.js\", \"https://cdn.jsdelivr.net/gh/Jwrede/Anki-KaTeX-Markdown/auto-render-cdn.js\"),\n\t\tgetScript(\"_markdown-it.min.js\", \"https://cdnjs.cloudflare.com/ajax/libs/markdown-it/12.0.4/markdown-it.min.js\"),\n                getScript(\"_markdown-it-mark.js\",\"https://cdn.jsdelivr.net/gh/Jwrede/Anki-KaTeX-Markdown/_markdown-it-mark.js\")\n\t];\n        Promise.all(getResources).then(() => getScript(\"_mhchem.js\", \"https://cdn.jsdelivr.net/npm/katex@0.13.11/dist/contrib/mhchem.min.js\")).then(render).catch(show);\n\t\n\n\tfunction getScript(path, altURL) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet script = document.createElement(\"script\");\n\t\t\tscript.onload = resolve;\n\t\t\tscript.onerror = function() {\n\t\t\t\tlet script_online = document.createElement(\"script\");\n\t\t\t\tscript_online.onload = resolve;\n\t\t\t\tscript_online.onerror = reject;\n\t\t\t\tscript_online.src = altURL;\n\t\t\t\tdocument.head.appendChild(script_online);\n\t\t\t}\n\t\t\tscript.src = path;\n\t\t\tdocument.head.appendChild(script);\n\t\t})\n\t}\n\n\tfunction getCSS(path, altURL) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tvar css = document.createElement('link');\n\t\t\tcss.setAttribute('rel', 'stylesheet');\n\t\t\tcss.type = 'text/css';\n\t\t\tcss.onload = resolve;\n\t\t\tcss.onerror = function() {\n\t\t\t\tvar css_online = document.createElement('link');\n\t\t\t\tcss_online.setAttribute('rel', 'stylesheet');\n\t\t\t\tcss_online.type = 'text/css';\n\t\t\t\tcss_online.onload = resolve;\n\t\t\t\tcss.onerror = reject;\n\t\t\t\tcss_online.href = altURL;\n\t\t\t\tdocument.head.appendChild(css_online);\n\t\t\t}\n\t\t\tcss.href = path;\n\t\t\tdocument.head.appendChild(css);\n\t\t});\n\t}\n\n\n\tfunction render() {\n\t\trenderMath(\"front\");\n\t\tmarkdown(\"front\");\n\t\tshow();\n\t}\n\n\tfunction show() {\n\t\tdocument.getElementById(\"front\").style.visibility = \"visible\";\n\t}\n\n\tfunction renderMath(ID) {\n\t\tlet text = document.getElementById(ID).innerHTML;\n\t\ttext = replaceInString(text);\n\t\tdocument.getElementById(ID).textContent = text;\n\t\trenderMathInElement(document.getElementById(ID), {\n\t\t\tdelimiters:  [\n  \t\t\t\t{left: \"$$\", right: \"$$\", display: true},\n  \t\t\t\t{left: \"$\", right: \"$\", display: false}\n\t\t\t],\n            throwOnError : false\n\t\t});\n\t}\n\n\tfunction markdown(ID) {\n\t\tlet md = new markdownit({typographer: true, html:true, highlight: function (str, lang) {\n                            if (lang && hljs.getLanguage(lang)) {\n                                try {\n                                    return hljs.highlight(str, { language: lang }).value;\n                                } catch (__) {}\n                            }\n\n                            return ''; // use external default escaping\n                        }}).use(markdownItMark);\n\t\tlet text = replaceHTMLElementsInString(document.getElementById(ID).innerHTML);\n\t\ttext = md.render(text);\n\t\tdocument.getElementById(ID).innerHTML = text.replace(/&lt;\\/span&gt;/gi,\"\\\\\");\n\t}\n\tfunction replaceInString(str) {\n\t\tstr = str.replace(/<[\\/]?pre[^>]*>/gi, \"\");\n\t\tstr = str.replace(/<br\\s*[\\/]?[^>]*>/gi, \"\\n\");\n\t\tstr = str.replace(/<div[^>]*>/gi, \"\\n\");\n\t\t// Thanks Graham A!\n\t\tstr = str.replace(/<[\\/]?span[^>]*>/gi, \"\")\n\t\tstr.replace(/<\\/div[^>]*>/g, \"\\n\");\n\t\treturn replaceHTMLElementsInString(str);\n\t}\n\n\tfunction replaceHTMLElementsInString(str) {\n\t\tstr = str.replace(/&nbsp;/gi, \" \");\n\t\tstr = str.replace(/&tab;/gi, \"\t\");\n\t\tstr = str.replace(/&gt;/gi, \">\");\n\t\tstr = str.replace(/&lt;/gi, \"<\");\n\t\treturn str.replace(/&amp;/gi, \"&\");\n\t}\n</script>\n"
                }
            ],
            "type": 0
        },
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "css": "\n\n.card {\n  font-family: arial;\n  font-size: 20px;\n  color: black;\n  background-color: white;\n}\ntable, th, td {\n\tborder: 1px solid black;\n\tborder-collapse: collapse;\n}\n#front, #back, #extra {\n\tvisibility: hidden;\n}\npre code {\n  background-color: #eee;\n  border: 1px solid #999;\n  display: block;\n  padding: 20px;\n  overflow: auto;\n}\n",
            "flds": [
                {
                    "collapsed": false,
                    "description": "",
                    "excludeFromSearch": false,
                    "font": "Arial",
                    "name": "Text",
                    "ord": 0,
                    "plainText": false,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "collapsed": false,
                    "description": "",
                    "excludeFromSearch": false,
                    "font": "Arial",
                    "name": "Back Extra",
                    "ord": 1,
                    "plainText": false,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "KaTeX and Markdown Cloze",
            "originalStockKind": 1,
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tmpls": [
                {
                    "afmt": "\n\n<div id=\"back\"><pre>{{cloze:Text}}</pre></div><br>\n<div id=\"extra\"><pre>{{Back Extra}}</pre></div>\n\n<script>\n\tvar getResources = [\n\t\tgetCSS(\"_katex.css\", \"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css\"),\n\t\tgetCSS(\"_highlight.css\", \"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/styles/default.min.css\"),\n\t\tgetScript(\"_highlight.js\", \"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/highlight.min.js\"),\n\t\tgetScript(\"_katex.min.js\", \"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.js\"),\n\t\tgetScript(\"_auto-render.js\", \"https://cdn.jsdelivr.net/gh/Jwrede/Anki-KaTeX-Markdown/auto-render-cdn.js\"),\n\t\tgetScript(\"_markdown-it.min.js\", \"https://cdnjs.cloudflare.com/ajax/libs/markdown-it/12.0.4/markdown-it.min.js\"),\n\t\tgetScript(\"_markdown-it-mark.js\",\"https://cdn.jsdelivr.net/gh/Jwrede/Anki-KaTeX-Markdown/_markdown-it-mark.js\")\n\t];\n        Promise.all(getResources).then(() => getScript(\"_mhchem.js\", \"https://cdn.jsdelivr.net/npm/katex@0.13.11/dist/contrib/mhchem.min.js\")).then(render).catch(show);\n\t\n\n\tfunction getScript(path, altURL) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet script = document.createElement(\"script\");\n\t\t\tscript.onload = resolve;\n\t\t\tscript.onerror = function() {\n\t\t\t\tlet script_online = document.createElement(\"script\");\n\t\t\t\tscript_online.onload = resolve;\n\t\t\t\tscript_online.onerror = reject;\n\t\t\t\tscript_online.src = altURL;\n\t\t\t\tdocument.head.appendChild(script_online);\n\t\t\t}\n\t\t\tscript.src = path;\n\t\t\tdocument.head.appendChild(script);\n\t\t})\n\t}\n\n\tfunction getCSS(path, altURL) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tvar css = document.createElement('link');\n\t\t\tcss.setAttribute('rel', 'stylesheet');\n\t\t\tcss.type = 'text/css';\n\t\t\tcss.onload = resolve;\n\t\t\tcss.onerror = function() {\n\t\t\t\tvar css_online = document.createElement('link');\n\t\t\t\tcss_online.setAttribute('rel', 'stylesheet');\n\t\t\t\tcss_online.type = 'text/css';\n\t\t\t\tcss_online.onload = resolve;\n\t\t\t\tcss_online.onerror = reject;\n\t\t\t\tcss_online.href = altURL;\n\t\t\t\tdocument.head.appendChild(css_online);\n\t\t\t}\n\t\t\tcss.href = path;\n\t\t\tdocument.head.appendChild(css);\n\t\t});\n\t}\n\n\n\tfunction render() {\n\t\trenderMath(\"back\");\n\t\tmarkdown(\"back\");\n\t\trenderMath(\"extra\");\n\t\tmarkdown(\"extra\");\t\n\t\tshow();\n\t}\n\n\tfunction show() {\n\t\tdocument.getElementById(\"back\").style.visibility = \"visible\";\n\t\tdocument.getElementById(\"extra\").style.visibility = \"visible\";\n\t}\n\n\tfunction renderMath(ID) {\n\t\tlet text = document.getElementById(ID).innerHTML;\n\t\ttext = replaceInString(text);\n\t\tdocument.getElementById(ID).textContent = text;\n\t\trenderMathInElement(document.getElementById(ID), {\n\t\t\tdelimiters:  [\n  \t\t\t\t{left: \"$$\", right: \"$$\", display: true},\n  \t\t\t\t{left: \"$\", right: \"$\", display: false}\n\t\t\t],\n                        throwOnError : false\n\t\t});\n\t}\n\tfunction markdown(ID) {\n\t\tlet md = new markdownit({typographer: true, html:true, highlight: function (str, lang) {\n                            if (lang && hljs.getLanguage(lang)) {\n                                try {\n                                    return hljs.highlight(str, { language: lang }).value;\n                                } catch (__) {}\n                            }\n\n                            return ''; // use external default escaping\n                        }}).use(markdownItMark);\n\t\tlet text = replaceHTMLElementsInString(document.getElementById(ID).innerHTML);\n\t\ttext = md.render(text);\n\t\tdocument.getElementById(ID).innerHTML = text.replace(/&lt;\\/span&gt;/gi,\"\\\\\");\n\t}\n\tfunction replaceInString(str) {\n\t\tstr = str.replace(/<[\\/]?pre[^>]*>/gi, \"\");\n\t\tstr = str.replace(/<br\\s*[\\/]?[^>]*>/gi, \"\\n\");\n\t\tstr = str.replace(/<div[^>]*>/gi, \"\\n\");\n\t\t// Thanks Graham A!\n\t\tstr = str.replace(/<[\\/]?span[^>]*>/gi, \"\")\n\t\tstr.replace(/<\\/div[^>]*>/g, \"\\n\");\n\t\treturn replaceHTMLElementsInString(str);\n\t}\n\n\tfunction replaceHTMLElementsInString(str) {\n\t\tstr = str.replace(/&nbsp;/gi, \" \");\n\t\tstr = str.replace(/&tab;/gi, \"\t\");\n\t\tstr = str.replace(/&gt;/gi, \">\");\n\t\tstr = str.replace(/&lt;/gi, \"<\");\n\t\treturn str.replace(/&amp;/gi, \"&\");\n\t}\n</script>\n\n",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "name": "KaTeX and Markdown Cloze",
                    "ord": 0,
                    "qfmt": "\n\n<div id=\"front\"><pre>{{cloze:Text}}</pre></div>\n\n<script>\n\tvar getResources = [\n\t\tgetCSS(\"_katex.css\", \"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css\"),\n\t\tgetCSS(\"_highlight.css\", \"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/styles/default.min.css\"),\n\t\tgetScript(\"_highlight.js\", \"https://cdnjs.cloudflare.com/ajax/libs/highlight.js/11.0.1/highlight.min.js\"),\n\t\tgetScript(\"_katex.min.js\", \"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.js\"),\n\t\tgetScript(\"_auto-render.js\", \"https://cdn.jsdelivr.net/gh/Jwrede/Anki-KaTeX-Markdown/auto-render-cdn.js\"),\n\t\tgetScript(\"_markdown-it.min.js\", \"https://cdnjs.cloudflare.com/ajax/libs/markdown-it/12.0.4/markdown-it.min.js\"),\n\t\tgetScript(\"_markdown-it-mark.js\",\"https://cdn.jsdelivr.net/gh/Jwrede/Anki-KaTeX-Markdown/_markdown-it-mark.js\")\n\t];\n        Promise.all(getResources).then(() => getScript(\"_mhchem.js\", \"https://cdn.jsdelivr.net/npm/katex@0.13.11/dist/contrib/mhchem.min.js\")).then(render).catch(show);\n\t\n\n\tfunction getScript(path, altURL) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tlet script = document.createElement(\"script\");\n\t\t\tscript.onload = resolve;\n\t\t\tscript.onerror = function() {\n\t\t\t\tlet script_online = document.createElement(\"script\");\n\t\t\t\tscript_online.onload = resolve;\n\t\t\t\tscript_online.onerror = reject;\n\t\t\t\tscript_online.src = altURL;\n\t\t\t\tdocument.head.appendChild(script_online);\n\t\t\t}\n\t\t\tscript.src = path;\n\t\t\tdocument.head.appendChild(script);\n\t\t})\n\t}\n\n\tfunction getCSS(path, altURL) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tvar css = document.createElement('link');\n\t\t\tcss.setAttribute('rel', 'stylesheet');\n\t\t\tcss.type = 'text/css';\n\t\t\tcss.onload = resolve;\n\t\t\tcss.onerror = function() {\n\t\t\t\tvar css_online = document.createElement('link');\n\t\t\t\tcss_online.setAttribute('rel', 'stylesheet');\n\t\t\t\tcss_online.type = 'text/css';\n\t\t\t\tcss_online.onload = resolve;\n\t\t\t\tcss_online.onerror = reject;\n\t\t\t\tcss_online.href = altURL;\n\t\t\t\tdocument.head.appendChild(css_online);\n\t\t\t}\n\t\t\tcss.href = path;\n\t\t\tdocument.head.appendChild(css);\n\t\t});\n\t}\n\tfunction render() {\n\t\trenderMath(\"front\");\n\t\tmarkdown(\"front\");\n\t\tshow();\n\t}\n\tfunction show() {\n\t\tdocument.getElementById(\"front\").style.visibility = \"visible\";\n\t}\n\tfunction renderMath(ID) {\n\t\tlet text = document.getElementById(ID).innerHTML;\n\t\ttext = replaceInString(text);\n\t\tdocument.getElementById(ID).textContent = text;\n\t\trenderMathInElement(document.getElementById(ID), {\n\t\t\tdelimiters:  [\n  \t\t\t\t{left: \"$$\", right: \"$$\", display: true},\n  \t\t\t\t{left: \"$\", right: \"$\", display: false}\n\t\t\t],\n                        throwOnError : false\n\t\t});\n\t}\n\tfunction markdown(ID) {\n\t\tlet md = new markdownit({typographer: true, html:true, highlight: function (str, lang) {\n                            if (lang && hljs.getLanguage(lang)) {\n                                try {\n                                    return hljs.highlight(str, { language: lang }).value;\n                                } catch (__) {}\n                            }\n\n                            return ''; // use external default escaping\n                        }}).use(markdownItMark);\n\t\tlet text = replaceHTMLElementsInString(document.getElementById(ID).innerHTML);\n\t\ttext = md.render(text);\n\t\tdocument.getElementById(ID).innerHTML = text.replace(/&lt;\\/span&gt;/gi,\"\\\\\");\n\t}\n\tfunction replaceInString(str) {\n\t\tstr = str.replace(/<[\\/]?pre[^>]*>/gi, \"\");\n\t\tstr = str.replace(/<br\\s*[\\/]?[^>]*>/gi, \"\\n\");\n\t\tstr = str.replace(/<div[^>]*>/gi, \"\\n\");\n\t\t// Thanks Graham A!\n\t\tstr = str.replace(/<[\\/]?span[^>]*>/gi, \"\")\n\t\tstr.replace(/<\\/div[^>]*>/g, \"\\n\");\n\t\treturn replaceHTMLElementsInString(str);\n\t}\n\n\tfunction replaceHTMLElementsInString(str) {\n\t\tstr = str.replace(/&nbsp;/gi, \" \");\n\t\tstr = str.replace(/&tab;/gi, \"\t\");\n\t\tstr = str.replace(/&gt;/gi, \">\");\n\t\tstr = str.replace(/&lt;/gi, \"<\");\n\t\treturn str.replace(/&amp;/gi, \"&\");\n\t}\n</script>\n"
                }
            ],
            "type": 1
        }
    ],
    "notes": [
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is an operating system?<br></span><br><span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">An operating system is&nbsp;</span>{{c1::software<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\"> that manages a computer's hardware</span>}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">&nbsp;and&nbsp;</span>{{c2::acts as an intermediary between the computer user and the computer hardware}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">. It provides a basis for&nbsp;</span>{{c3::application programs}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">&nbsp;and is responsible for allocating resources such as the&nbsp;</span>{{c4::CPU}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">,&nbsp;</span>{{c5::memory}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">, and&nbsp;</span>{{c6::I/O devices}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">.</span>",
                ""
            ],
            "guid": "qA`N]vjQeT",
            "note_model_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What are the four main components of a computer system?<br><br>The four main components are:<br><ul><li>{{c1::Hardware}}: {{c5::the CPU, memory, and I/O devices}}</li><li>{{c2::Operating system}}: {{c6::controls and coordinates the use of hardware among various application programs and users}}</li><li>{{c3::Application programs}}: {{c7::such as word processors, compilers, and web browsers, define how system resources are used to solve users' computing problems}}</li><li>{{c4::Users}}: {{c8::interact with the system}}</li></ul>",
                ""
            ],
            "guid": "c[RC=V$y&_",
            "note_model_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "Describe the user's view of the computer system.<br><br>The user's view {{c1::varies depending on the interface being used}}. The goal from the user perspective is to {{c2::maximize the work (or play) they can accomplish}}, with a focus on {{c3::ease of use}}, {{c4::performance}}, and {{c5::security}}. Users are generally not concerned with how the hardware and software resources are shared.",
                ""
            ],
            "guid": "PG#n2;_at<",
            "note_model_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "Describe the system's view of the operating system.<br><b><br></b>From the computer's point of view, the operating system is a {{c1::resource allocator}}&nbsp;and a {{c2::control program}}. As a {{c1::resource allocator}}, the operating system {{c1::manages resources}} such as {{c3::CPU time}}, {{c4::memory space}}, and {{c5::I/O devices}}, allocating them to specific programs and users. As a {{c2::control program}}, it manages the {{c6::execution of user programs to prevent errors and improper use of the computer, especially regarding I/O devices}}.",
                ""
            ],
            "guid": "ro{avW?8=R",
            "note_model_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is the kernel?",
                "The kernel is the one program running at all times on the computer. The kernel is part of the operating system, but the operating system includes other programs."
            ],
            "guid": "dm|S2&&[0+",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is the role of a device driver?",
                "An operating system has a device driver for each device controller. The device driver provides a uniform interface to the device for the rest of the operating system."
            ],
            "guid": "r)Y?UV+%.,",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "Explain how an interrupt works.<br><br><ul><li>{{c1::Hardware triggers an interrupt by sending a signal to the CPU.&nbsp;}}</li><li>{{c2::The CPU then stops what it is doing, and transfers execution to a fixed location that contains the starting address of the interrupt service routine.&nbsp;}}</li><li>{{c3::After completion of the service routine, the CPU resumes computation as if the interrupt had not occurred.}}</li></ul>Interrupts are a key way in which hardware interacts with the operating system.<br>",
                ""
            ],
            "guid": "j;(|V8L2WP",
            "note_model_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is an interrupt vector?",
                "An interrupt vector is an array or table of addresses of the interrupt service routines for the various devices. Each address is indexed by a unique number given with the interrupt request."
            ],
            "guid": "B_o3f1|t8a",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What are the two types of interrupt requests?<br><br>There are two interrupt request lines:<br><br><ul><li>{{c1::Nonmaskable interrupts}}: {{c3::Reserved for events such as unrecoverable memory errors}}</li><li>{{c2::Maskable interrupts}}: {{c4::Can be turned off by the CPU before the execution of critical instruction sequences that must not be interrupted.}}</li></ul>",
                ""
            ],
            "guid": "ETVivrUL?[",
            "note_model_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is the purpose of the interrupt mechanism?",
                "The purpose is to reduce the need for a single interrupt handler to search all possible sources of interrupts. The interrupt mechanism also implements a system of interrupt priority levels."
            ],
            "guid": "exE^@j-SVY",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is main memory?",
                "Main memory, also known as random-access memory (RAM), is where programs are loaded to be executed. It is volatile, meaning its contents are lost when power is turned off."
            ],
            "guid": "Z2co0zmT]",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is a bootstrap program?",
                "A bootstrap program is the first program that runs on computer power-up. It loads the operating system into memory."
            ],
            "guid": "n26~~_2{rG",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What are the units of storage?<br><br><ul><li>{{c1::A bit is the basic unit, representing 0 or 1.}}<br></li><li>{{c2::A byte is typically 8 bits.}}<br></li><li>{{c3::A word is a given computer architecture's native unit of data, made up of one or more bytes.}}<br></li></ul>",
                ""
            ],
            "guid": "f3wR)!|[kJ",
            "note_model_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is secondary storage?<br><br>{{c1::Secondary storage is non-volatile storage that can hold large quantities of data permanently}}. {{c2::Hard-disk drives (HDDs)}} and {{c3::nonvolatile memory (NVM)}} devices are the most common forms. Secondary storage is {{c4::slower than main memory}}.",
                ""
            ],
            "guid": "y$*<{Ue<qk",
            "note_model_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is tertiary storage?",
                "Tertiary storage is slow and large, used for special purposes like backup copies on devices like magnetic tape."
            ],
            "guid": "lu3u;F@<c5",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is volatile storage?",
                "Volatile storage loses its content when power is removed. Main memory is an example of volatile storage."
            ],
            "guid": "iH`,%-+=N8",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is non-volatile storage (NVS)?",
                "Non-volatile storage retains its contents when power is lost. Secondary storage such as hard drives and flash memory are examples of non-volatile storage."
            ],
            "guid": "iP>3nud$6R",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is direct memory access (DMA)?",
                "DMA is used for bulk data movement, where a device controller transfers data directly to or from main memory without CPU intervention, which reduces overhead."
            ],
            "guid": "r7J<|<@IXF",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is a single-processor system?",
                "A single-processor system uses only one general-purpose CPU. Special-purpose processors can also exist in these systems, but they are not for general use."
            ],
            "guid": "bp5]:1F}ax",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is a multiprocessor system?",
                "A multiprocessor system has two or more processors that share the computer bus, memory, and peripheral devices. There are symmetric and non-uniform memory access multiprocessors."
            ],
            "guid": "h8`|o;7{U!",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is symmetric multiprocessing (SMP)?",
                "In SMP, each processor performs all tasks."
            ],
            "guid": "Q.a9+,qdys",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is a core?",
                "A core is the basic computation unit of the CPU. A multicore CPU has multiple cores on the same chip."
            ],
            "guid": "LWGd<Dr;c&",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is non-uniform memory access (NUMA)?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">In NUMA, each CPU has its own local memory, and CPUs are connected via an interconnect. Accessing remote memory is slower.</span>"
            ],
            "guid": "K9`-UpQWE*",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is a clustered system?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">A clustered system is composed of two or more individual systems (nodes) that are loosely coupled. They share storage and are connected via a local-area network (LAN).</span>"
            ],
            "guid": "20S/YD6Oq",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is asymmetric clustering?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">In asymmetric clustering, one machine is in hot-standby while the other is running the applications. If the active server fails, the hot-standby host becomes the active server.</span>"
            ],
            "guid": "vW(&?<&I6@",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is symmetric clustering?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">In symmetric clustering, two or more hosts are running applications and monitoring each other.</span>"
            ],
            "guid": "PNhki:D>Dn",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is parallelization?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Parallelization is a technique that divides a program into separate components that can run concurrently on different processors or computers in a cluster.</span>"
            ],
            "guid": "Gdv/jH`k2#",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is a distributed lock manager (DLM)?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">A DLM is used in some clustered systems to ensure that only one process has access to a particular piece of data at any time.</span>"
            ],
            "guid": "gJzD_)|T;2",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is the bootstrap process?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">When a computer is powered on, a bootstrap program is loaded from firmware. The program initializes all aspects of the system, loads the operating system kernel into memory, and starts system services, allowing the system to become fully booted.</span>"
            ],
            "guid": "ruG7bbJxUl",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is a trap or exception?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">A trap or exception is a software-generated interrupt caused by an error, such as division by zero or invalid memory access.</span>"
            ],
            "guid": "u2K~TCB.Fz",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is a system call?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">A system call is a request from a user program to the operating system to perform a specific task.</span>"
            ],
            "guid": "z=!:y8ZG10",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is multiprogramming?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Multiprogramming increases CPU utilization by organizing jobs so that the CPU always has one to execute.</span>"
            ],
            "guid": "KSeys0g.nV",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is multitasking?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Multitasking is a logical extension of multiprogramming where the CPU switches between processes frequently to provide a fast response to the user.</span>"
            ],
            "guid": "n@R@%rW|yB",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is CPU scheduling?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">CPU scheduling is the process of choosing which process will run next.</span>"
            ],
            "guid": "wEg^9dy%sc",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is virtual memory?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Virtual memory allows programs to be larger than physical memory by abstracting main memory into a uniform array of storage.</span>"
            ],
            "guid": "i^^pc`hrMv",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What are the two modes of operation?<br><br>The two modes of operation are:<br><ul><li>{{c1::<strong>User mode:</strong> where user applications run.}}<br></li><li>{{c2::<strong>Kernel mode (also called supervisor mode, system mode, or privileged mode):</strong> where the operating system runs.&nbsp;}}<br></li></ul>{{c3::A mode bit indicates which mode the system is in.}}<br>",
                ""
            ],
            "guid": "n!.e[-VzDX",
            "note_model_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What are privileged instructions?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Privileged instructions can only be executed in kernel mode to ensure the proper operation of the system. Examples include I/O control, timer management, and interrupt management.</span>"
            ],
            "guid": "A7%-?AmtIE",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is a timer?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">A timer can be set to interrupt the computer after a specified period. It is used to maintain control over the CPU and prevent a program from getting stuck in an infinite loop.</span>"
            ],
            "guid": "Qa}u4kWgj{",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is a process?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">A process is a program in execution and is the unit of work in a system. A process needs resources, including CPU time, memory, and I/O devices, to execute.</span>"
            ],
            "guid": "Mhr<~#nO}T",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What are the responsibilities of the operating system with respect to process management?<br></span><br>The operating system is responsible for:<br><ul><li>{{c1::Creating and deleting user and system processes}}</li><li>{{c2::Scheduling processes and threads on the CPUs}}</li><li>{{c3::Suspending and resuming processes}}</li><li>{{c4::Providing mechanisms for process synchronization}}</li><li>{{c5::Providing mechanisms for process communication}}</li></ul>",
                ""
            ],
            "guid": "k@:C@|n,qP",
            "note_model_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is the operating system responsible for in regards to memory management?<br></span><br>The operating system is responsible for:<br><ul><li>{{c1::Keeping track of which parts of memory are currently being used and by whom}}</li><li>{{c2::Allocating and deallocating memory space as needed}}</li><li>{{c3::Deciding which processes and data to move into and out of memory}}</li></ul>",
                ""
            ],
            "guid": "OC-qxt7CcY",
            "note_model_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is the operating system responsible for in regards to file-system management?<br></span><br>The operating system is responsible for:<br><ul><li>{{c1::Creating and deleting files}}</li><li>{{c2::Creating and deleting directories to organize files}}</li><li>{{c3::Supporting primitives for manipulating files and directories}}</li><li>{{c4::Mapping files onto mass storage}}</li><li>{{c5::Backing up files on stable storage media}}</li></ul>",
                ""
            ],
            "guid": "gaXYI.dsCo",
            "note_model_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is the operating system responsible for in regards to mass-storage management?<br></span><br>The operating system is responsible for:<br><ul><li>{{c1::Mounting and unmounting storage}}</li><li>{{c2::Free space management}}</li><li>{{c3::Storage allocation}}</li><li>{{c4::Disk scheduling}}</li><li>{{c5::Partitioning}}</li><li>{{c6::Protection}}</li></ul>",
                ""
            ],
            "guid": "i=T3:f9v3g",
            "note_model_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is caching?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Caching involves copying information into a faster storage system, the cache, on a temporary basis. It speeds up access to frequently used data.</span>"
            ],
            "guid": "nskCmDqq8A",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is the I/O subsystem?<br></span><br><span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">The I/O subsystem is responsible for&nbsp;</span>{{c1::managing I/O operations}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">. It includes a&nbsp;</span>{{c2::memory-management component}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">, a&nbsp;</span>{{c3::general device-driver interface}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">, and&nbsp;</span>{{c4::drivers for specific hardware devices}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">.</span>",
                ""
            ],
            "guid": "f^Y>q2`P?`",
            "note_model_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What are the key aspects of a computer system in terms of security and protection?<br><b><br></b>A system must provide {{c1::protection}} by {{c2::controlling access to system resources}}, while {{c3::security}} involves {{c4::defending the system from internal and external attacks}}. {{c3::Security}} also involves {{c5::maintaining a list of user names and associated user IDs, or group identifiers}}.",
                ""
            ],
            "guid": "CUHRaOH4lT",
            "note_model_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is virtualization?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Virtualization is a technology that allows the abstraction of hardware to create virtual environments for running multiple operating systems on the same physical computer.</span>"
            ],
            "guid": "nTX*,X47Pr",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is emulation?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Emulation is when software simulates computer hardware.</span>"
            ],
            "guid": "Obx#ss*T$^",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is a virtual machine manager (VMM)?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">A VMM manages the virtual machines, controls their resource use, and protects them from each other.</span>"
            ],
            "guid": "BGD;uB/uEO",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is a distributed system?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">A distributed system is a collection of separate computer systems that are networked to provide access to shared resources.</span>"
            ],
            "guid": "en/{0/Ol,^",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is a network?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">A network is a communication path between two or more systems. Networks vary based on distance and types of connections [33]. Common types include LANs, WANs, MANs, and PANs.</span>"
            ],
            "guid": "i#0~BYFMgt",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is a network operating system?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">A network operating system provides features such as file sharing across the network. A distributed operating system presents a less autonomous environment.</span>"
            ],
            "guid": "hXr&]4!39j",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is a disk block?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">A medium-sized disk drive might be divided into several thousand individual units, or disk blocks.</span>"
            ],
            "guid": "HDM;b;4F3U",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What are the key characteristics of traditional computing?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Traditional computing involved PCs connected to a network with servers providing file and print services. Remote access and portability were achieved through technologies such as laptop computers.</span>"
            ],
            "guid": "zxE70u}08j",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What are thin clients?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Thin clients are essentially terminals that understand web-based computing and are used for more security or easier maintenance.</span>"
            ],
            "guid": "u!j~A]3YwN",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is real-time embedded computing?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Real-time embedded systems are used when rigid time requirements have been placed on the operation of a processor. They have limited user interface and often need to respond within a defined time or the system will fail.</span>"
            ],
            "guid": "iY6~uN&s1^",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is free and open-source software?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Free software is licensed to allow no-cost use, redistribution, and modification. Open-source software makes the source code available, but does not necessarily offer such licensing.</span>"
            ],
            "guid": "Jkzj`2f,P|",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is copyleft?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Copyleft is a form of licensing invented by Stallman that allows a work to be copied, modified, and distributed, but requires that all derivative works must also be licensed under the same copyleft license.</span>"
            ],
            "guid": "wUm+1ZI&ip",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What are some examples of free and open-source operating systems?<br></span><br><span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Examples of free and open-source operating systems include:</span><br style=\"color: rgb(19, 19, 20);\"><ul style=\"color: rgb(19, 19, 20);\"><li>{{c1::GNU/Linux}}<br></li><li>{{c2::FreeBSD}}<br></li><li><span style=\"background-color: rgb(255, 255, 255);\">{{c3::Solaris}}</span></li></ul>",
                ""
            ],
            "guid": "w?^-H_arh5",
            "note_model_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "List the main services provided by an operating system.<br><ul><li>{{c1::<strong>User Interface:</strong> Provides ways for users to interact with the system (GUI, CLI, touch-screen).}}<br></li><li>{{c2::<strong>Program Execution:</strong> Loads and executes programs.}}<br></li><li>{{c3::<strong>I/O Operations:</strong> Manages input/output devices.}}<br></li><li>{{c4::<strong>File-system Manipulation:</strong> Creates, deletes, and manages files and directories.}}<br></li><li>{{c5::<strong>Communications:</strong> Enables interprocess communication, either locally or across a network.}}<br></li><li>{{c6::<strong>Error Detection:</strong> Detects and handles errors.}}<br></li><li>{{c7::<strong>Resource Allocation:</strong> Manages resources such as CPU, memory, and storage.}}<br></li><li>{{c8::<strong>Logging:</strong> Tracks system usage.}}<br></li><li>{{c9::<strong>Protection and Security:</strong> Controls access to resources and ensures data security.}}<br></li></ul>",
                ""
            ],
            "guid": "utE`bNm:&S",
            "note_model_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What are the three fundamental types of user interfaces provided by operating systems?<br><ul><li>{{c1::<strong>Command-line Interface (CLI):</strong> Allows users to enter commands directly.}}<br></li><li>{{c2::<strong>Graphical User Interface (GUI):</strong> Uses a mouse and icons for interaction.}}<br></li><li>{{c3::<strong>Touch-screen Interface:</strong> Uses touch gestures for interaction.}}<br></li></ul>",
                ""
            ],
            "guid": "HVj6Qr}~sx",
            "note_model_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is a \"command interpreter\" or \"shell\"?<br><br>A command interpreter or shell is a {{c1::program that reads commands entered by the user and executes them by translating them to system calls}}. It can be a {{c2::special program that is run when the user logs on}}. Examples include the {{c3::Bourne-Again shell (bash)}}, {{c4::C shell}}, and {{c5::Korn shell}}.",
                ""
            ],
            "guid": "bNhLz?Ppn",
            "note_model_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is a system call?<br><br>A system call is a {{c1::request by a user-level program to access a service provided by the operating system}}. It provides the {{c2::interface between a running program and the operating system}}. System calls are often written in C or C++, but may require assembly language for certain low-level tasks.",
                ""
            ],
            "guid": "J>{.g$_ut`",
            "note_model_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is an Application Programming Interface (API)?<br><br>An API {{c1::specifies a set of functions that are available to an application programmer, including the parameters and return values that can be expected}}. An API is a {{c2::higher-level interface built on top of system calls}}. The API makes the system calls more convenient for the programmer.",
                ""
            ],
            "guid": "jj-*~Grigg",
            "note_model_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">How are parameters passed during a system call?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Parameters for system calls can be passed in registers, in a block of memory, or on a stack. Linux uses a combination of these approaches.</span>"
            ],
            "guid": "l/oy!;iB#r",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What are the major categories of system calls?<br><ul><li>{{c1::Process Control}}</li><li>{{c2::File Management}}</li><li>{{c3::Device Management}}</li><li>{{c4::Information Maintenance}}</li><li>{{c5::Communications}}</li><li>{{c6::Protection}}</li></ul>",
                ""
            ],
            "guid": "ts{gD0>oY%",
            "note_model_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is a run-time environment (RTE)?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">The RTE is the full suite of software needed to execute applications written in a given programming language including compilers, interpreters, libraries, and loaders.</span>"
            ],
            "guid": "Q)ZPU7sY;>",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is a \"boot loader\"?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">A boot loader is a small piece of software that loads the operating system kernel into memory when a computer is started. It initializes the system and prepares it for the operating system to take over.</span>"
            ],
            "guid": "A,]_?u@QX`",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Describe the concept of a \"monolithic\" operating system structure.</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">A monolithic operating system has </span><strong>no structure</strong><span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">; all its functionality is contained in a single binary file that runs in a single address space. This approach is simple, but can be difficult to modify or debug. Examples include older versions of UNIX and Linux.</span>"
            ],
            "guid": "y+fIO7ayK>",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Describe the \"layered\" operating system structure.</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">A layered operating system is divided into </span><strong>multiple layers</strong><span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">, where each layer depends only on the layers below it. The bottom layer is the hardware, and the highest layer is the user interface. This approach simplifies debugging and system verification.</span>"
            ],
            "guid": "HG%3.qG{jF",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Describe the \"microkernel\" operating system structure.</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">A microkernel aims to keep the kernel as small as possible, with most operating system services running as user-level processes. This approach improves modularity and security. Communication between processes is typically done using message passing.</span>"
            ],
            "guid": "N(@)S<iV3~",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What are \"loadable kernel modules\"?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Loadable kernel modules (LKMs) are a way of adding functionality to the operating system kernel at runtime. This approach allows for dynamic modification of the kernel without requiring a reboot. This is a modular approach.</span>"
            ],
            "guid": "lYe$Zj6.OZ",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is a \"hybrid\" operating system?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">A hybrid system combines different architectural approaches, such as monolithic and microkernel. For example, Linux is monolithic, but also supports loadable kernel modules.</span>"
            ],
            "guid": "tph5sXr9F4",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is the difference between mechanism and policy in operating system design?<br><ul><li>{{c1::<strong>Mechanism</strong> refers to <em>how</em> something is done.}}&nbsp;</li><li>{{c2::<strong>Policy</strong> refers to <em>what</em> is done.&nbsp;}}<br></li></ul>It is good to separate them for {{c3::flexibility}}. A {{c1::mechanism}} can {{c4::implement different policies}}.<br>",
                ""
            ],
            "guid": "x]%mOETh~b",
            "note_model_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Why is it important to write an operating system in a high-level language?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Writing in high-level languages like C or C++ makes the code faster to write, more compact, and easier to understand and debug. It also makes the system easier to port to other hardware.</span>"
            ],
            "guid": "BXN$K8*Es}",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is the purpose of the \"linker\" in the build process?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">The linker combines relocatable object files into a single binary executable file.</span>"
            ],
            "guid": "QaZw$YGes[",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is the purpose of the \"loader\" in the build process?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">The loader loads the executable file into memory, making it ready to run.</span>"
            ],
            "guid": "PfG>nt53Ak",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What are the main reasons why applications are operating-system specific?<br><ul><li>{{c1::Different binary formats for program executables.}}</li><li>{{c2::Different instruction sets for different CPUs.}}</li><li>{{c3::Different system calls.}}</li></ul>",
                ""
            ],
            "guid": "qba`4Vc?b5",
            "note_model_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is an Application Binary Interface (ABI)?<br><br>{{c1::An ABI defines how different components of binary code can interface for a given operating system on a given architecture}}. It includes details about {{c2::data types}}, {{c3::register usage}}, and {{c4::how parameters are passed in system calls}}.",
                ""
            ],
            "guid": "cq^V[3Wz7J",
            "note_model_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What are the two primary goals in designing an operating system?<br><ul><li>{{c1::<strong>User goals:</strong> The system should be convenient to use, easy to learn, reliable, safe, and fast.}}<br></li><li>{{c2::<strong>System goals:</strong> The system should be easy to design, implement, maintain, and should be flexible, reliable, error-free, and efficient.}}<br></li></ul>",
                ""
            ],
            "guid": "cgK?k1-,%B",
            "note_model_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is \"system generation\" or \"system build\"?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">It's the process of configuring an operating system. It specifies which features are included, and varies the configuration based on the system for which the operating system is being built.</span>"
            ],
            "guid": "Kb6o4p^Hh,",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is \"debugging\" in the context of operating systems?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Debugging is the process of identifying and fixing errors in both the hardware and the software of a system. It includes failure analysis and performance tuning.</span>"
            ],
            "guid": "m?+q+@s8BC",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What are \"counters\" in operating system debugging and performance tuning?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Counters are a collection of system-wide or per-process statistics. They keep track of system activity, such as the number of system calls made, or the number of operations on a disk or network.</span>"
            ],
            "guid": "BoJV&2|:vl",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is \"tracing\" in operating system debugging and performance tuning?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Tracing involves following the execution of a program, often using system-call invocations, to identify bottlenecks or other performance issues.</span>"
            ],
            "guid": "v`sJj#U-vE",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is the BCC (BPF Compiler Collection)?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">BCC is a toolkit for dynamic kernel tracing in Linux. It's written in Python, embeds C code, and interfaces with eBPF. This tool helps to debug interactions between the user-level and kernel code.</span>"
            ],
            "guid": "nrc~~M%4Ou",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What are the different parts of a process in memory?<br></span><br>A process in memory is divided into multiple sections:<br><ul><li>{{c1::<strong>Text Section:</strong> The executable code}}<br></li><li>{{c2::<strong>Data Section:</strong> Global variables}}<br></li><li>{{c3::<strong>Heap Section:</strong> Dynamically allocated memory during run time}}<br></li><li>{{c4::<strong>Stack Section:</strong> Temporary data storage when invoking functions}}<br></li></ul>",
                ""
            ],
            "guid": "F_iWW|$:|_",
            "note_model_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is the difference between a program and a process?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">A program is a </span><strong>passive entity</strong><span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\"> stored on disk as an executable file. A process is an </span><strong>active entity</strong><span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\"> with a program counter specifying the next instruction to execute, and a set of associated resources.</span>"
            ],
            "guid": "w@,xo8(qap",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What are the different states a process can be in?<br></span><br>A process can be in one of the following states:<br><ul><li>{{c1::<strong>New:</strong> The process is being created}}<br></li><li>{{c2::<strong>Running:</strong> Instructions are being executed}}<br></li><li>{{c3::<strong>Waiting:</strong> The process is waiting for some event to occur, such as I/O completion or a signal}}<br></li><li>{{c4::<strong>Ready:</strong> The process is waiting to be assigned to a processor}}<br></li><li>{{c5::<strong>Terminated:</strong> The process has finished execution}}<br></li></ul>",
                ""
            ],
            "guid": "ptH#&U1W>1",
            "note_model_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is a Process Control Block (PCB)?<br><br>A PCB is {{c1::a data structure in the operating system that represents a process}}. It contains information associated with a specific process, such as the {{c2::process state}}, {{c3::program counter}}, {{c4::CPU registers}}, {{c5::memory management information}}, and {{c6::I/O status information}}. The PCB serves as a repository for all the data needed to {{c7::start, restart, or process}}.",
                ""
            ],
            "guid": "w62:;rqVq^",
            "note_model_uuid": "baf95efe-c3fc-11ef-add0-7d43f340fc4e",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is process scheduling?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Process scheduling is the activity of the operating system that manages the execution of processes. The objective of multiprogramming is to have some process running at all times to maximize CPU utilization. The </span><strong>process scheduler</strong><span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\"> selects an available process to run on the CPU.</span>"
            ],
            "guid": "m^3Wb>=x}|",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is a context switch?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">A context switch is the mechanism by which the operating system switches the CPU from one process to another. It involves saving the current state of the CPU and loading the saved state of the new process scheduled to run. The context is represented in the PCB.</span>"
            ],
            "guid": "LRJF`lZ}]+",
            "note_model_uuid": "50989b18-bf5d-11ef-b4fe-25358fe4e4db",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is swapping?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Swapping is a memory management technique where a process is moved from memory to disk (**swapped out**) and later back to memory (**swapped in**). This is done to free up memory when it is overcommitted.</span>"
            ],
            "guid": "MU&s.HJ0%!",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">How are new processes created?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">New processes are typically created by an existing process, called the **parent process**. The newly created processes are called **child processes**. The parent process can either execute concurrently with its children or wait until some or all of its children have terminated. In UNIX systems, the **fork()** system call is used to create a new process. In Windows, the **CreateProcess()** function is used.</span>"
            ],
            "guid": "wkuasHjeZ+",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is a process identifier (pid)?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">A pid is a unique integer number that identifies a process within the operating system. It is used as an index to access various attributes of a process within the kernel.</span>"
            ],
            "guid": "Q7kj.o[i1N",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is the `init` or `systemd` process?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">The `init` or `systemd` process is the **root parent process** of all processes in the system. It is the first process created when the system boots.</span>"
            ],
            "guid": "k#GG6f(iO*",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<div>What are the different types of process termination?</div><div>A process can terminate by:</div><div>{{c1::*   Executing its final statement and asking the operating system to delete it via the **exit()** system call}}</div><div>{{c2::*   Being terminated by another process via the **TerminateProcess()** system call (in Windows)}}</div><div>{{c3::*   Being terminated by its parent process}}</div><div>{{c4::*   When a parent process terminates, its children may be terminated by the operating system, which is known as **cascading termination**.}}</div>",
                ""
            ],
            "guid": "PPlc&4Mzz~",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is a zombie process?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">A zombie process is a process that has terminated, but whose parent has not yet called **wait()**. The process's resources are deallocated, but its entry in the process table remains.</span>"
            ],
            "guid": "O!3]lhS}8=",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<div>What are the different process classifications in Android?</div><div>Android classifies processes based on their importance:</div><div>{{c1::*   **Foreground process**: The current process visible on the screen and the one the user is interacting with.}}</div><div>{{c2::*   **Visible process**: A process that is not directly on the foreground but is performing an activity the user is aware of.}}</div><div>{{c3::*   **Service process**: A process that provides a service, such as streaming music, but is not directly apparent to the user.}}</div><div>{{c4::*   **Background process**: A process that is running in the background without the user's direct interaction.}}</div><div>{{c5::*   **Empty process**: A process that holds no active components.}}</div>",
                ""
            ],
            "guid": "rHa2T,P_0D",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is interprocess communication (IPC)?</span>",
                "<div>IPC is a mechanism that allows processes to communicate and exchange data with each other. Processes can be either independent or cooperating. Cooperating processes can share information, speed up computation, and have modular system construction.</div>"
            ],
            "guid": "B7KlC3~ZwA",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<div>What are the two fundamental models of IPC?</div><div>The two fundamental models of IPC are:</div><div>{{c1::*   **Shared memory**: A region of memory is shared by cooperating processes, where they exchange data by reading and writing.}}</div><div>{{c2::*   **Message passing**: Processes communicate by exchanging messages.}}</div>",
                ""
            ],
            "guid": "f4pT2.jMt,",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is a bounded buffer?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">A bounded buffer is a buffer with a fixed size, used in the producer-consumer problem. If the buffer is full, the producer must wait until the consumer has consumed some of the items, and if the buffer is empty, the consumer must wait for the producer to produce items.</span>"
            ],
            "guid": "J6cN+@lcIN",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is direct communication in message passing?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">In direct communication, each process that wants to communicate must explicitly name the recipient or sender of the communication.</span>"
            ],
            "guid": "vZsO60}Z^K",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is indirect communication in message passing?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">In indirect communication, messages are sent to and received from mailboxes or ports. A process can communicate with another via a number of different mailboxes.</span>"
            ],
            "guid": "IH9#.EHPj%",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<div>What is the difference between blocking and nonblocking send/receive?</div><div>*   **Blocking send**: {{c1::The sending process is blocked until the message is received by the receiving process or by the mailbox.}}</div><div>*   **Nonblocking send**: {{c2::The sending process sends the message and continues.}}</div><div>*   **Blocking receive**: {{c3::The receiver blocks until a message is available.}}</div><div>*   **Nonblocking receive**: {{c4::The receiver retrieves either a valid message or a null.}}</div>",
                ""
            ],
            "guid": "y39Xf:v-$%",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<div>What are the different types of buffering?</div><div>{{c1::*   **Zero capacity**: The queue has a maximum length of zero; thus, the sender must block until the recipient receives the message.}}</div><div>{{c2::*   **Bounded capacity**: The queue has finite length *n*; thus, at most *n* messages can reside in it.}}</div><div>{{c3::*  **Unbounded capacity**: The queue's length is infinite; thus, any number of messages can wait in the queue.}}</div>",
                ""
            ],
            "guid": "lXLHC+.nN]",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is POSIX shared memory?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">POSIX shared memory is organized using memory-mapped files, which associate the region of shared memory with a file. Processes must first create a shared memory object using the **shm_open()** system call. The **mmap()** function establishes a memory-mapped file containing the shared-memory object.</span>"
            ],
            "guid": "l)nBhoEJQ.",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is Mach message passing?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Mach message passing uses messages sent to and received from mailboxes called ports. Each task has a port called the **Task Self port**, and another called the **Notify port**.</span>"
            ],
            "guid": "B5%C>(hFGw",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<div>What are the two types of messages in Mach?</div><div>{{c1::*   **Fixed-size message**: Contains metadata about the message, including source and destination ports.}}</div><div>{{c2::*   **Variable-sized body**: Contains the actual data.}}</div>",
                ""
            ],
            "guid": "E`mf/L:HEx",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<div>What are the different techniques for message passing in Windows ALPC?</div><div>Windows uses the {{c1::advanced local procedure call (ALPC)}} for communication between processes. The three message-passing techniques are:</div><div>{{c2::*   For small messages, the port's message queue is used as intermediate storage.}}</div><div>{{c3::*   For larger messages, a section object (shared memory) is used.}}</div><div>{{c4::*   An API can be used to allow server processes to read and write directly into the address space of a client.}}</div>",
                ""
            ],
            "guid": "zvFiU)gdu_",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<div>What are pipes?</div><div>{{c1::A pipe is a conduit allowing two processes to communicate.&nbsp;}}</div><div>{{c2::* **Ordinary pipes** are unidirectional and require a parent-child relationship between communicating processes.&nbsp;}}</div><div>{{c3::* **Named pipes** provide a more powerful tool and allow multiple processes to communicate.}}</div>",
                ""
            ],
            "guid": "pRO2`a2ew4",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<div>How are ordinary pipes implemented in UNIX and Windows?</div><div>In UNIX, ordinary pipes are created using the {{c1::**pipe()**}} system call. In Windows, they are created using the {{c2::**CreatePipe()**}} function. Pipes in UNIX are {{c3::inherited by child processes}}, while in Windows, {{c4::they must be explicitly specified}}.</div>",
                ""
            ],
            "guid": "IwwNKL^YG{",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What are sockets?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">A socket is an endpoint for communication between processes, often across a network. Sockets are identified by an IP address concatenated with a port number.</span>"
            ],
            "guid": "yD<63&qcIQ",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What are Remote Procedure Calls (RPCs)?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">RPCs are a mechanism for processes on separate systems to communicate and invoke functions on another system. They involve a stub on the client-side and a stub on the server side. A port is a number that is included at the start of a message packet.</span>"
            ],
            "guid": "GXWak#F~c`",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is parameter marshaling in RPCs?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Parameter marshaling addresses the differences in data representation between the client and server machines. Data is converted into an external data representation (XDR) on the client side, before being sent to the server, where it is converted to the machine-dependent representation for the server.</span>"
            ],
            "guid": "q=[u6DUCQ<",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<div>What is the \"at most once\" and \"exactly once\" semantic in RPCs?</div><div>{{c1::*   **At most once**: The server may receive a message one or more times or not at all.}}</div><div>{{c2::*   **Exactly once**: The server receives the message and executes it only one time, even if the request is sent multiple times.}}</div>",
                ""
            ],
            "guid": "l0ZN5mAzoN",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">How does Android use RPC?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Android uses RPCs through its binder framework for interprocess communication. An application component can provide a service using the **bindService()** method. The **onBind()** method returns an interface that client processes use to interact with the service.</span>"
            ],
            "guid": "sY0kl*<PQj",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is a **thread**?<br></span><br><span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">A thread is&nbsp;</span>{{c1::a basic unit of **CPU** utilization}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">. It has a&nbsp;</span>{{c2::**thread ID**}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">, a&nbsp;</span>{{c3::**program counter**}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">, a&nbsp;</span>{{c4::**register set**}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">, and a&nbsp;</span>{{c5::**stack**}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">. Threads share&nbsp;</span>{{c6::code}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">,&nbsp;</span>{{c7::data}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">, and&nbsp;</span>{{c8::OS resources}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">&nbsp;with other threads in the same process.</span>",
                ""
            ],
            "guid": "k6`?[xU$D",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is the difference between a **single-threaded** and a **multithreaded** process?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">A **single-threaded** process has one thread of control, while a **multithreaded** process has multiple threads, enabling it to perform multiple tasks **concurrently**.</span>"
            ],
            "guid": "LRNg&5hZg}",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is **parallelism** and **concurrency**?<br></span><br><span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">- **Parallelism** is&nbsp;</span>{{c1::when multiple threads execute simultaneously on multiple CPU cores}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\"><br>- **Concurrency** is&nbsp;</span>{{c2::when multiple threads make progress without necessarily running at the same time}}",
                ""
            ],
            "guid": "QfzN]BOM4)",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What are the four main benefits of **multithreading**?<br></span><br><div>- {{c1::**Responsiveness**: Programs remain responsive even if parts are blocked.}}</div><div>- {{c2::**Resource Sharing**: Threads share memory and resources, making it easier to share data.}}</div><div>- {{c3::**Economy**: Creating threads is more efficient than creating processes.}}</div><div>- {{c4::**Scalability**: Threads can take advantage of multicore architectures.}}</div>",
                ""
            ],
            "guid": "b!=4B],Kr%",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is **multicore programming**?<br></span><br><span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">**Multicore programming**&nbsp;</span>{{c1::utilizes multiple computing cores on a single chip to execute threads in parallel}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">. It presents challenges like&nbsp;</span>{{c2::identifying tasks}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">,&nbsp;</span>{{c3::load balancing}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">,&nbsp;</span>{{c4::data splitting}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">,&nbsp;</span>{{c5::dependency management}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">, and&nbsp;</span>{{c6::testing}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">.</span>",
                ""
            ],
            "guid": "rX`jG>[8jY",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is **Amdahl's Law**, and what does it tell us?<br></span><br><span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">**Amdahl's Law** provides&nbsp;</span>{{c1::a formula to calculate potential speedup from adding cores}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">:&nbsp;</span>{{c2::`speedup &lt;= 1 / (S + (1-S)/N)`}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">, where `S` is&nbsp;</span>{{c3::the serial portion of the program}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">, and `N` is&nbsp;</span>{{c4::the number of cores}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">. It highlights that&nbsp;</span>{{c5::the **serial portion limits speedup**}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">.</span>",
                ""
            ],
            "guid": "BUOs8^|rJ=",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is the difference between **data parallelism** and **task parallelism**?<br></span><br><span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">**Data parallelism**&nbsp;</span>{{c1::distributes subsets of data across cores}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">, while **task parallelism**&nbsp;</span>{{c2::distributes different tasks across cores}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">.</span>",
                ""
            ],
            "guid": "J5;);AR52w",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What are **user threads** and **kernel threads**?<br></span><br><span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">**User threads** are&nbsp;</span>{{c1::managed above the kernel}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">, while **kernel threads** are&nbsp;</span>{{c2::managed directly by the OS}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">.</span>",
                ""
            ],
            "guid": "L-Hx2OqD~7",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What are the three main **multithreading models**?<br></span><br><div>- {{c1::**Many-to-one:** Many user threads map to one kernel thread.}}</div><div>- {{c2::**One-to-one:** Each user thread maps to a kernel thread.}}</div><div>- {{c3::**Many-to-many:** Many user threads map to a smaller or equal number of kernel threads.}}</div><div>- A variation is the {{c4::**two-level model**, which allows a user-level thread to be bound to a kernel thread.}}</div>",
                ""
            ],
            "guid": "ozV$<k<<5c",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is a **thread library**?<br></span><br><span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">A thread library&nbsp;</span>{{c1::provides an **API** for creating and managing threads}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">. It can be implemented in&nbsp;</span>{{c2::user space}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">&nbsp;or&nbsp;</span>{{c3::as a kernel-level library}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">. Examples include&nbsp;</span>{{c4::**Pthreads**}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">,&nbsp;</span>{{c5::**Windows threads**}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">, and&nbsp;</span>{{c6::**Java threads**}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">.</span>",
                ""
            ],
            "guid": "yy;M&P{>aF",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What are the two primary strategies for creating multiple threads using thread libraries?<br></span><br>{{c1::- **Asynchronous threading**, where the parent and child threads execute independently}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\"><br></span>{{c2::- **Synchronous threading**, where the parent waits for the child to complete.}}",
                ""
            ],
            "guid": "P{aEa>)[@>",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is **implicit threading**?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">**Implicit threading** transfers thread creation and management to compilers and runtime libraries.</span>"
            ],
            "guid": "fZtZfT.^eT",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What are **thread pools**?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">**Thread pools** create a set of threads at start-up that wait for work, reducing the overhead of creating new threads.</span>"
            ],
            "guid": "xY^>*9z.a*",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is the **fork-join strategy**?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">A parent thread creates child threads (**fork**) and waits for them to complete and combine their results (**join**).</span>"
            ],
            "guid": "tYdgaUbd8>",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is **OpenMP**?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">**OpenMP** is a set of compiler directives and an **API** that supports parallel programming in shared memory environments.</span>"
            ],
            "guid": "vFcqg,yei=",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is **</span>{{c1::Grand Central Dispatch}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">&nbsp;(GCD)**?<br></span><br><span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">**GCD** is&nbsp;</span>{{c2::an Apple technology that manages the scheduling of tasks on dispatch queues}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">, supporting&nbsp;</span>{{c3::serial}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">&nbsp;and&nbsp;</span>{{c4::concurrent}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">&nbsp;execution.</span>",
                ""
            ],
            "guid": "m>U0lc!*#/",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What are **Intel Threading Building Blocks (TBB)**?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">**TBB** is a template library for designing parallel applications in C++.</span>"
            ],
            "guid": "wWWk4x>MX-",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">How do the `fork()` and `exec()` system calls behave in multithreaded programs?<br></span><br><span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">The behavior of `fork()`&nbsp;</span>{{c1::depends on the application}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">, while `exec()`&nbsp;</span>{{c2::replaces the entire process including all threads}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">.</span>",
                ""
            ],
            "guid": "s12I8<j.FW",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What are **signals** in UNIX systems?<br></span><br><span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">**Signals**&nbsp;</span>{{c1::notify a process of an event}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">; they can be&nbsp;</span>{{c2::synchronous}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">&nbsp;or&nbsp;</span>{{c3::asynchronous}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">&nbsp;and handled by&nbsp;</span>{{c4::a default}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">&nbsp;or&nbsp;</span>{{c5::user-defined}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">&nbsp;</span>{{c6::signal handler}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">.</span>",
                ""
            ],
            "guid": "hW?szn>?p3",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is **thread cancellation**?<br></span><br><span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">**Thread cancellation** is&nbsp;</span>{{c1::terminating a thread before completion}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">. It can be&nbsp;</span>{{c2::asynchronous}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">&nbsp;or&nbsp;</span>{{c3::deferred}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">.</span>",
                ""
            ],
            "guid": "IqnujxBT5|",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is **thread-local storage (TLS)**?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">**TLS** provides each thread with its own copy of certain data.</span>"
            ],
            "guid": "s|6;^OyVm3",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What are **scheduler activations**?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">**Scheduler activations** coordinate communication between the user-thread library and the kernel, adjusting the number of kernel threads for optimal performance.</span>"
            ],
            "guid": "MvjM{@Zy^a",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">How does **Windows** implement threads?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">**Windows** uses a **one-to-one mapping** between user-level threads and kernel threads.</span>"
            ],
            "guid": "KI%*M`Yu,R",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">How does **Linux** implement threads?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">**Linux** refers to both processes and threads as **tasks**, using the `clone()` system call to create tasks that behave like either processes or threads.</span>"
            ],
            "guid": "z|bHJb$#Ww",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is multiprogramming and why is it important?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">**Multiprogramming** is a technique where the operating system keeps several processes in memory simultaneously. This is done to **maximize CPU utilization**. When one process waits (e.g., for I/O), the CPU can switch to another process, making the system more efficient.</span>"
            ],
            "guid": "zl{;e~+42M",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Describe the cycle of CPU and I/O bursts.<br><br></span><span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Processes alternate between periods of&nbsp;</span>{{c1::**CPU execution**}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">&nbsp;**(CPU bursts)** and&nbsp;</span>{{c2::waiting for **I/O operations**}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">&nbsp;to complete (I/O bursts). Understanding these bursts helps in designing efficient scheduling algorithms.</span>",
                ""
            ],
            "guid": "KSMici#4i[",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is the role of the dispatcher in CPU scheduling?<br></span><br><span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">The **dispatcher** is&nbsp;</span>{{c1::the module that gives control of the CPU to the process selected by the scheduler}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">. It is responsible for&nbsp;</span>{{c2::the **context switch**}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">,&nbsp;</span>{{c3::switching to user mode}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">, and&nbsp;</span>{{c4::jumping to the proper location in the user program}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">.</span>",
                ""
            ],
            "guid": "vOB[k$oJ.O",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Define dispatch latency.</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">**Dispatch latency** is the time it takes for the dispatcher to stop one process and start another. Minimizing this latency is important for system performance.</span>"
            ],
            "guid": "znRtZ`DTFJ",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is a context switch?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">A **context switch** is when the operating system saves the state of the old process and loads the saved state of the new process. This allows multiple processes to share the CPU.</span>"
            ],
            "guid": "J$l&WuILtD",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is the relationship between process scheduling and thread scheduling?<br></span><br><span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">The terms **process scheduling** and **thread scheduling** are&nbsp;</span>{{c1::often used interchangeably when discussing general scheduling concepts}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">. However, in modern operating systems,&nbsp;</span>{{c2::scheduling is often done at the kernel-level for threads, not processes}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">.</span>",
                ""
            ],
            "guid": "b6*oWfEn_7",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Describe the FCFS scheduling algorithm.</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">**FCFS** is the simplest scheduling algorithm where the process that requests the CPU first is allocated the CPU first. It's easy to implement but can lead to **long waiting times for short processes** if they are behind long processes.</span>"
            ],
            "guid": "h]-/[nv1y6",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">How does the RR scheduling algorithm work?<br></span><br><span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">In **RR** scheduling,&nbsp;</span>{{c1::each process is given a fixed amount of CPU time}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">&nbsp;called a&nbsp;</span>{{c2::**time quantum**}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">. If a process does not finish within its&nbsp;</span>{{c2::quantum}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">, it is&nbsp;</span>{{c3::preempted and moved to the end of the ready queue}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">. It's designed to be fairer than&nbsp;</span>{{c4::FCFS}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">.</span>",
                ""
            ],
            "guid": "Hcjz$T3pFu",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Explain priority scheduling.<br></span><br><span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">**Priority scheduling**&nbsp;</span>{{c1::allocates the CPU to the process with the highest priority}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">. Processes with the same priority are&nbsp;</span>{{c2::typically scheduled using FCFS}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">. Priorities can be assigned using a fixed range of numbers, with lower numbers sometimes indicating higher priority, but there is no universal standard.</span>",
                ""
            ],
            "guid": "z7&03+NL@x",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is multilevel queue scheduling?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">In **multilevel queue scheduling**, the ready queue is divided into separate queues, often based on process characteristics. Processes are permanently assigned to a queue.</span>"
            ],
            "guid": "w1iQ48i{(D",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">How does multilevel feedback queue scheduling improve upon multilevel queue scheduling?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">**Multilevel feedback queue scheduling** allows processes to move between different priority queues. A process that uses too much CPU time may be moved to a lower-priority queue, which helps to prevent starvation and prioritize I/O bound processes.</span>"
            ],
            "guid": "t<#l4&,323",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is real-time scheduling?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">**Real-time scheduling** provides timing guarantees for real-time tasks, which are those with strict time constraints. It is used in systems where tasks must be completed by certain deadlines.</span>"
            ],
            "guid": "yW?luzi?do",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Define interrupt latency.</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">**Interrupt latency** is the time from when an interrupt signal arrives to the start of the interrupt handling routine. Minimizing interrupt latency is important in real-time systems.</span>"
            ],
            "guid": "jWH&87`-8J",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is rate-monotonic scheduling?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">**Rate-monotonic scheduling** is a real-time scheduling algorithm that schedules periodic tasks using a static priority policy with preemption. The priority is assigned based on the frequency of the task, with higher frequency tasks having higher priority.</span>"
            ],
            "guid": "jaW@e0v?5B",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">How does EDF scheduling work?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">**Earliest-deadline-first (EDF) scheduling** is a real-time scheduling algorithm that assigns priorities dynamically based on task deadlines. Tasks with the earliest deadlines get higher priority.</span>"
            ],
            "guid": "wWCdlr1Q;7",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is the Completely Fair Scheduler?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">The **CFS** is the default scheduler in Linux. It tracks how long each task has run using a \"**virtual run time**\" value and aims to balance the load across multiple cores fairly. It uses a \"**nice**\" value to prioritize tasks, where lower nice values correspond to higher priorities.</span>"
            ],
            "guid": "hU+TkVh34D",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What are multicore processors and how do they affect scheduling?<br></span><br><span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">**Multicore processors** have&nbsp;</span>{{c1::multiple CPUs (cores) on a single chip}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">. Each&nbsp;</span>{{c1::core}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">&nbsp;can have multiple&nbsp;</span>{{c2::**hardware threads**}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">, which appear to the OS as&nbsp;</span>{{c3::separate logical CPUs}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">. This allows for&nbsp;</span>{{c4::parallel execution of threads}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">.</span>",
                ""
            ],
            "guid": "ha|t=u-c.g",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Why is load balancing important in multicore systems?</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">**Load balancing** attempts to distribute work evenly across multiple cores in a multicore system. This helps ensure that all cores are utilized and prevent bottlenecks. Load balancing can sometimes increase memory access time.</span>"
            ],
            "guid": "NbOSHEZ(FG",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is a hardware thread?<br></span><br><span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">A **hardware thread** is&nbsp;</span>{{c1::a physical resource on a CPU core that can execute a thread}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">. When one hardware thread stalls, the&nbsp;</span>{{c2::core can switch to another thread}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">. Intel uses&nbsp;</span>{{c3::**hyper-threading**}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">&nbsp;or&nbsp;</span>{{c4::**simultaneous multi-threading (SMT)**}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">&nbsp;to&nbsp;</span>{{c5::provide multiple hardware threads on a single core}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">.</span>",
                ""
            ],
            "guid": "J$%bWJWAfd",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">Define scheduling domains.</span>",
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">A **scheduling domain** is a set of CPU cores that can be balanced against one another. Cores within a domain share certain resources like caches. On NUMA systems, these domains can represent NUMA nodes.</span>"
            ],
            "guid": "C=hEr>@KGO",
            "note_model_uuid": "1fbb2cc2-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">What is the difference between SCS and PCS?<br></span><br><span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">With **SCS**, the&nbsp;</span>{{c1::kernel schedules all threads in the system onto available CPUs}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">. In contrast, with **PCS**,&nbsp;</span>{{c2::user-level threads are scheduled onto available lightweight processes (LWPs)}}<span style=\"color: rgb(19, 19, 20); background-color: rgb(255, 255, 255);\">. The choice between these depends on the operating system and the implementation of threads.</span>",
                ""
            ],
            "guid": "hP-t,cAF]R",
            "note_model_uuid": "1fbb32da-c471-11ef-94b4-df15a2c59ac5",
            "tags": []
        }
    ],
    "reviewLimit": null,
    "reviewLimitToday": null
}